@page "/editarcliente"
@inject IClienteService ClienteService
@inject NavigationManager navigationManager

<HeaderPage TitlePage="Editando un cliente" />

@if (cliente == null)
{
    <p><em>Obteniendo el cliente a editar...</em></p>
}
else
{
    <EditForm Model="cliente" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Nombre">Nombre</label>
            <InputText id="Nombre" class="form-control" @bind-Value="cliente.Nombre" />
        </div>
        <div>
            <label for="Direccion">Direccion</label>
            <InputText id="Direccion" class="form-control" @bind-Value="cliente.Direccion" />
        </div>
        <div>
            <label for="Telefonos">Telefonos</label>
            <InputText id="Telefonos" class="form-control" @bind-Value="cliente.Telefonos" />
        </div>
@*         <div>
            <label for="LocalidadId">Localidad</label>
            <InputSelect id="LocalidadId" class="form-control" @bind-Value="cliente.LocalidadId">
                <option value="">Seleccione una localidad</option>
                @foreach (var localidad in localidades)
                {
                    <option value="@localidad.Id">@localidad.Nombre</option>
                }
            </InputSelect>
        </div> *@

        <button type="submit" class="btn btn-primary">Guardar</button>
    </EditForm>
}

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public int IdClienteEditado { get; set; }

    private Cliente? cliente;

    protected override async Task OnInitializedAsync()
    {
        cliente = await ClienteService.GetByIdAsync(IdClienteEditado);
    }
    private void Guardar()
    {
        ClienteService.UpdateAsync(cliente);
        navigationManager.NavigateTo("/clientes");
    }
}
